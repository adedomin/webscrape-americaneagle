env:
  browser: true
  es6: true
  node: true
parserOptions:
  ecmaVersion: 2017
extends: 'eslint:recommended'
rules:
  # preference, some like 2
  indent:
    - warn
    - 4
  linebreak-style:
    - warn
    - unix
  # double quotes?
  # what are we, a json document?
  quotes:
    - warn
    - single
  # ASI called, 
  # they said semicolons are only 
  # useful for minification
  semi:
    - warn
    - never
  no-console: 
    - off
  # use {}
  no-new-object:
    - warn
  # use []
  no-array-constructor:
    - warn
  # why....????
  no-new-func:
    - error
  # var x = 'x', y = { x, someotherprop: 'y', } // y.x = 'x'
  object-shorthand:
    - warn
  # only wrap property names in quotes for names that need it
  # eg 'asd-xyz': 'value' NOT 'asd': value; should just be asd: 'value'
  quote-props:
    - error
    - as-needed
  # it's EXTREMELY unlikely you meant 
  # to not return in an array prototype like map
  array-callback-return:
    - error
  # we are ES6, not ES5. use `blah ${var}` over 'blah ' + var
  prefer-template:
    - warn
  # this SHOULD be an error...
  # basically throw error if you try to use invalid escapes
  # e.g. \i or \s or \" in a single-quote string, etc
  no-useless-escape:
    - error
  # this is the crockford way
  # e.g. (() => {}())
  wrap-iife:
    - error
  # sometimes it's needed, but it should be avoided
  # don't use for (statement)
  # use something like arr.map, arr.forEach Object.keys(obj).map...so on
  no-iterator:
    - warn
  # use ...args over old fashion way of handling variadics
  prefer-rest-params:
    - error
  # es6 style, easier than apply, etc
  # console.log(...someArr)
  prefer-spread:
    - error
  # they are already kind of weird
  # please don't nest them
  no-nested-ternary:
    - error
  # if {
  # }
  # else {
  # }
  brace-style:
    - error
    - stroustrup
  # // start comment with a space
  spaced-comment:
    - error
  # function() {}; not function(){}
  space-before-blocks:
    - error
  # if (), not if(), function() not function ()
  keyword-spacing:
    - error
  # end all items with a comma
  # including last!!!!!!!!!!
  # { x: 'x', y: 'y', }
  comma-dangle:
    - error
    - always-multiline
